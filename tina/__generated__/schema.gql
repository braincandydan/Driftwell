# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  site(relativePath: String): Site!
  siteConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteFilter): SiteConnection!
}

input DocumentFilter {
  post: PostFilter
  page: PageFilter
  site: SiteFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | Page | Site | Folder

type Post implements Node & Document {
  title: String!
  excerpt: String
  date: String!
  author: String!
  coverImage: String
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  excerpt: StringFilter
  date: DatetimeFilter
  author: StringFilter
  coverImage: ImageFilter
  tags: StringFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type PageSeo {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

type Page implements Node & Document {
  title: String!
  description: String
  slug: String!
  pageType: String!
  heroImage: String
  heroTitle: String
  heroSubtitle: String
  servicesTitle: String
  service1Title: String
  service1Description: String
  service2Title: String
  service2Description: String
  service3Title: String
  service3Description: String
  aboutTitle: String
  aboutContent: JSON
  contactTitle: String
  seo: PageSeo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
  ogImage: ImageFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  pageType: StringFilter
  heroImage: ImageFilter
  heroTitle: StringFilter
  heroSubtitle: StringFilter
  servicesTitle: StringFilter
  service1Title: StringFilter
  service1Description: StringFilter
  service2Title: StringFilter
  service2Description: StringFilter
  service3Title: StringFilter
  service3Description: StringFilter
  aboutTitle: StringFilter
  aboutContent: RichTextFilter
  contactTitle: StringFilter
  seo: PageSeoFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type SiteSocial {
  twitter: String
  github: String
  linkedin: String
}

type SiteContact {
  phone: String
  email: String
  address: String
}

type Site implements Node & Document {
  title: String
  description: String
  logo: String
  url: String
  social: SiteSocial
  contact: SiteContact
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SiteSocialFilter {
  twitter: StringFilter
  github: StringFilter
  linkedin: StringFilter
}

input SiteContactFilter {
  phone: StringFilter
  email: StringFilter
  address: StringFilter
}

input SiteFilter {
  title: StringFilter
  description: StringFilter
  logo: ImageFilter
  url: StringFilter
  social: SiteSocialFilter
  contact: SiteContactFilter
}

type SiteConnectionEdges {
  cursor: String!
  node: Site
}

type SiteConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateSite(relativePath: String!, params: SiteMutation!): Site!
  createSite(relativePath: String!, params: SiteMutation!): Site!
}

input DocumentUpdateMutation {
  post: PostMutation
  page: PageMutation
  site: SiteMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  page: PageMutation
  site: SiteMutation
}

input PostMutation {
  title: String
  excerpt: String
  date: String
  author: String
  coverImage: String
  tags: [String]
  body: JSON
}

input PageSeoMutation {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

input PageMutation {
  title: String
  description: String
  slug: String
  pageType: String
  heroImage: String
  heroTitle: String
  heroSubtitle: String
  servicesTitle: String
  service1Title: String
  service1Description: String
  service2Title: String
  service2Description: String
  service3Title: String
  service3Description: String
  aboutTitle: String
  aboutContent: JSON
  contactTitle: String
  seo: PageSeoMutation
}

input SiteSocialMutation {
  twitter: String
  github: String
  linkedin: String
}

input SiteContactMutation {
  phone: String
  email: String
  address: String
}

input SiteMutation {
  title: String
  description: String
  logo: String
  url: String
  social: SiteSocialMutation
  contact: SiteContactMutation
}

schema {
  query: Query
  mutation: Mutation
}
